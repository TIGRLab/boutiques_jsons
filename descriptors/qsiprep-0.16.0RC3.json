{
    "author": "PENN LINC",
    "name" : "QSIPrep (BIDS app)",
    "tool-version" : "0.16.0RC3",
    "description" : "qsiprep configures pipelines for processing diffusion-weighted MRI (dMRI) data.",
    "container-image": {
        "type": "singularity",
        "image": "pennbbl/qsiprep:0.16.0RC3"
    },
    "schema-version" : "0.5",
    "tags": {
        "application-type": [
            "bids"
        ],
        "domain": [
            "neuroinformatics",
            "fmri"
        ]
    },
    "url": "https://qsiprep.readthedocs.io/en/stable",
    "command-line": "fmriprep [BIDS_DIR] [OUTPUT_DIR] [ANALYSIS_LEVEL] [VERSION] [SKIP_BIDS_VALIDATION] [PARTICIPANT_LABEL] [ACQUISITION_TYPE] [BIDS_DATABASE_DIR] [BIDS_FILTER_FILE] [INTERACTIVE_REPORTS_ONLY] [RECON_ONLY] [RECON_SPEC] [RECON_INPUT] [FREESURFER_INPUT] [SKIP_ODF_REPORTS] [NTHREADS] [OMP_NTHREADS] [MEM_MB] [LOW_MEM] [USE_PLUGIN] [ANAT_ONLY] [DWI_ONLY] [INFANT] [BOILERPLATE] [VERBOSE] [IGNORE] [LONGITUDINAL] [B0_THRESHOLD] [DWI_DENOISE_WINDOW] [DENOISE_METHOD] [UNRINGING_METHOD] [DWI_NO_BIASCORR] [NO_B0_HARMONIZATION] [DENOISE_AFTER_COMBINING] [SEPARATE_ALL_DWIS] [DISTORTION_GROUP_MERGE] [WRITE_LOCAL_BVECS] [OUTPUT_SPACE] [TEMPLATE] [OUTPUT_RESOLUTION] [B0_TO_T1W_TRANSFORM] [INTRAMODAL_TEMPLATE_ITERS] [INTRAMODAL_TEMPLATE_TRANSFORM] [B0_MOTION_CORR_TO] [HMC_TRANSFORM] [HMC_MODEL] [EDDY_CONFIG] [SHORELINE_ITERS] [IMPUTE_SLICE_THRESHOLD] [SKULL_STRIP_TEMPLATE] [SKULL_STRIP_FIXED_SEED] [SKIP_T1_BASED_SPATIAL_NORMALIZATION] [FS_LICENSE_FILE] [DO_RECONALL] [PREFER_DEDICATED_FMAPS] [FMAP_BSPLINE] [FMAP_NO_DEMEAN] [USE_SYN_SDC] [FORCE_SYN] [WORK_DIR] [RESOURCE_MONITOR] [REPORTS_ONLY] [RUN_UUID] [WRITE_GRAPH] [STOP_ON_FIRST_CRASH] [NOTRACK] [SLOPPY]",
    "inputs": [
        {
            "description": "the root folder of a BIDS valid dataset (sub-XXXXX folders should be found at the top level in this folder).",
            "id": "bids_dir",
            "name": "bids_dir",
            "optional": false,
            "type": "String",
            "value-key": "[BIDS_DIR]"
        },
        {
            "description": "the output path for the outcomes of preprocessing and visual reports",
            "id": "output_dir",
            "name": "output_dir",
            "optional": false,
            "type": "String",
            "value-key": "[OUTPUT_DIR]"
        },
        {
            "description": "processing stage to be run, only \"participant\" in the case of FMRIPREP (see BIDS-Apps specification).",
            "id": "analysis_level",
            "name": "analysis_level",
            "optional": false,
            "type": "String",
            "value-choices": [
                "participant"
            ],
            "value-key": "[ANALYSIS_LEVEL]"
        },
        {
            "command-line-flag": "--version",
            "description": "show program's version number and exit",
            "id": "version",
            "name": "version",
            "optional": true,
            "type": "Flag",
            "value-key": "[VERSION]"
        },
        {
            "command-line-flag": "--skip_bids_validation",
            "description": "assume the input dataset is BIDS compliant and skip the validation",
            "id": "skip_bids_validation",
            "name": "skip_bids_validation",
            "optional": true,
            "type": "Flag",
            "value-key": "[SKIP_BIDS_VALIDATION]"
        },
        {
            "command-line-flag": "--participant_label",
            "description": "a space delimited list of participant identifiers or a single identifier (the sub- prefix can be removed)",
            "id": "participant_label",
            "list": true,
            "name": "participant_label",
            "optional": true,
            "type": "String",
            "value-key": "[PARTICIPANT_LABEL]"
        },
        {
            "command-line-flag": "--acquisition_type",
            "description": "select a specific acquisition to be processed",
            "id": "acquisition_type",
            "name": "acquisition_type",
            "optional": true,
            "type": "String",
            "value-key": "[ACQUISITION_TYPE]"
        },
        {
            "command-line-flag": "--bids-database-dir",
            "description":"Path to an existing PyBIDS database folder, for faster indexing (especially useful for large datasets).",
            "id": "bids_database_dir",
            "name": "bids_database_dir",
            "optional": true,
            "type":"String",
            "value-key": "[BIDS_DATABASE_DIR]"
        },
        {
            "command-line-flag": "--bids-filter-file",
            "description": "A JSON describing custom BIDS input filters using PyBIDS. For further details, please check out https://fmriprep.readthedocs.io/en/20.2.0/faq.html#how-do-I-select-only-certain-files-to-be-input-to-fMRIPrep",
            "id": "bids_filter_file",
            "name":"bids_filter_file",
            "optional":true,
            "type": "File",
            "uses-absolute-path": true,
            "value-key": "[BIDS_FILTER_FILE]"
        },
        {
          "command-line-flag": "--interactive-reports-only",
          "description": "Create interactive report json files on already preprocessed data",
          "id": "interactive_reports_only",
          "name": "interactive_reports_only",
          "optional": true,
          "type": "Flag",
          "value-key": "[INTERACTIVE_REPORTS_ONLY]"
        },
        {
          "command-line-flag": "--recon-only",
          "description": "Run only reconstruction, assumes preprocessing has already completed",
          "id": "recon_only",
          "name": "recon_only",
          "optional": true,
          "type":"Flag",
          "value-key": "[RECON_ONLY]"
        },
        {
          "command-line-flag": "--recon-spec",
          "description": "JSON file specifying a reconstruction pipeline to be run after preprocessing",
          "id": "recon_spec",
          "name": "recon_spec",
          "optional": true,
          "type":"Flag",
          "value-key": "[RECON_SPEC]"
        },
        {
          "command-line-flag": "--recon-input",
          "description": "use this directory as inputs to qsirecon. This option skips qsiprep.",
          "id": "recon_input",
          "name": "recon_input",
          "optional": true,
          "type":"String",
          "value-key": "[RECON_INPUT]"
        },
        {
          "command-line-flag": "--freesurfer-input",
          "description": "Directory containing freesurfer outputs to be integrated into recon.",
          "id": "freesurfer_input",
          "name": "freesurfer_input",
          "optional": true,
          "type":"String",
          "value-key": "[FREESURFER_INPUT]"
        },
        {
          "command-line-flag": "--skip-odf-reports",
          "description": "run only reconstruction, assumes preprocessing has already completed.",
          "id": "skip_odf_reports",
          "name": "skip_odf_reports",
          "optional": true,
          "type": "Flag",
          "value-key": "[SKIP_ODF_REPORTS]"
        },
        {
            "command-line-flag": "--nthreads",
            "description": "maximum number of threads across all processes",
            "id": "nthreads",
            "name": "nthreads",
            "optional": true,
            "type": "Number",
            "value-key": "[NTHREADS]"
        },
        {
            "command-line-flag": "--omp-nthreads",
            "description": "maximum number of threads per-process",
            "id": "omp_nthreads",
            "name": "omp_nthreads",
            "optional": true,
            "type": "Number",
            "value-key": "[OMP_NTHREADS]"
        },
        {
            "command-line-flag": "--mem_mb",
            "description": "upper bound memory limit for FMRIPREP processes",
            "id": "mem_mb",
            "name": "mem_mb",
            "optional": true,
            "type": "Number",
            "value-key": "[MEM_MB]"
        },
        {
            "command-line-flag": "--low-mem",
            "description": "attempt to reduce memory usage (will increase disk usage in working directory)",
            "id": "low_mem",
            "name": "low_mem",
            "optional": true,
            "type": "Flag",
            "value-key": "[LOW_MEM]"
        },
        {
            "command-line-flag": "--use-plugin",
            "description": "nipype plugin configuration file",
            "id": "use_plugin",
            "name": "use_plugin",
            "optional": true,
            "type": "String",
            "value-key": "[USE_PLUGIN]"
        },
        {
            "command-line-flag": "--anat-only",
            "description": "run anatomical workflows only",
            "id": "anat_only",
            "name": "anat_only",
            "optional": true,
            "type": "Flag",
            "value-key": "[ANAT_ONLY]"
        },
        {
            "command-line-flag": "--dwi-only",
            "description": "ignore anatomical (T1w/T2w) data and process DWIs only",
            "id": "dwi_only",
            "name": "dwi_only",
            "optional": true,
            "type": "Flag",
            "value-key": "[DWI_ONLY]"
        },
        {
            "command-line-flag": "--infant",
            "description": "configure pipelines to process infant brains",
            "id": "infant",
            "name": "infant",
            "optional": true,
            "type": "Flag",
            "value-key": "[INFANT]"
        },
        {
            "command-line-flag": "--boilerplate_only",
            "description": "generate boilerplate only",
            "id": "boilerplate_only",
            "name": "boilerplate_only",
            "optional": true,
            "type": "Flag",
            "value-key": "[BOILERPLATE_ONLY]"
        },
        {
            "command-line-flag": "",
            "description": "increases log verbosity for each occurence, debug level is -vvv",
            "id": "verbosity",
            "name": "verbosity",
            "optional": true,
            "type": "String",
            "value-choices": [
                "-v",
                "-vv",
                "-vvv"
            ],
            "value-key": "[VERBOSITY]"
        },
        {
            "command-line-flag": "--ignore",
            "description": "ignore selected aspects of the input dataset to disable corresponding parts of the workflow (a space delimited list)",
            "id": "ignore",
            "list": true,
            "name": "ignore",
            "optional": true,
            "type": "String",
            "value-choices": [ "fieldmaps" ],
            "value-key": "[IGNORE]"
        },
        {
            "command-line-flag": "--longitudinal",
            "description": "treat dataset as longitudinal - may increase runtime",
            "id": "longitudinal",
            "name": "longitudinal",
            "optional": true,
            "type": "Flag",
            "value-key": "[LONGITUDINAL]"
        },
        {
            "command-line-flag": "--b0-threshold",
            "description": "any value in the .bval file less than this will be considered a b=0 image. Current default threshold = 100; this threshold can be lowered or increased. Note, setting this too high can result in inaccurate results.",
            "id": "b0_threshold",
            "name": "b0_threshold",
            "optional": true,
            "type": "Number",
            "value-key": "[B0_THRESHOLD]"
        },
        {
            "command-line-flag": "--dwi-denoise-window",
            "description": "window size in voxels for image-based denoising, integer or “auto”.If “auto”, 5 will be used for dwidenoise and auto-configured for patch2self based on the number of b>0 images.",
            "id": "dwi_denoise_window",
            "name": "dwi_denoise_window",
            "optional": true,
            "type": "Number",
            "value-key": "[DWI_DENOISE_WINDOW]"
        },
        {
            "command-line-flag": "--denoise-method",
            "description": "Possible choices: dwidenoise, patch2self, none. Image-based denoising method. Either “dwidenoise” (MRtrix), “patch2self” (DIPY) or none. (default: dwidenoise)",
            "id": "denoise_method",
            "name": "denoise_method",
            "optional": true,
            "type": "String",
            "value-choices": [ "dwidenoise", "patch2self" ],
            "value-key": "[DENOISE_METHOD]"
        },
        {
            "command-line-flag": "--unringing-method",
            "description": "Possible choices: none, mrdegibbs",
            "id": "unringing_method",
            "name": "unringing_method",
            "optional": true,
            "type": "String",
            "value-choices": [ "mrdegibbs" ],
            "value-key": "[UNRINGING_METHOD]"
        },
        {
            "command-line-flag": "--dwi-no-biascorr",
            "description": "skip b0-based dwi spatial bias correction",
            "id": "dwi_no_biascorr",
            "name": "dwi_no_biascorr",
            "optional": true,
            "type": "Flag",
            "value-key": "[DWI_NO_BIASCORR]"
        },
        {
            "command-line-flag": "--no-b0-harmonization",
            "description": "skip re-scaling dwi scans to have matching b=0 intensities",
            "id": "no_b0_harmonization",
            "name": "no_b0_harmonization",
            "optional": true,
            "type": "Flag",
            "value-key": "[NO_B0_HARMONIZATION]"
        },
        {
            "command-line-flag": "--denoise-after-combining",
            "description": "run dwidenoise after combining dwis. Requires --combine-all-dwis",
            "id": "denoise_after_combining",
            "name": "denoise_after_combining",
            "optional": true,
            "type": "Flag",
            "value-key": "[DENOISE_AFTER_COMBINING]"
        },
        {
            "command-line-flag": "--separate-all-dwis",
            "description": "don’t attempt to combine dwis from multiple runs. Each will be processed separately.",
            "id": "separate_all_dwis",
            "name": "separate_all_dwis",
            "optional": true,
            "type": "Flag",
            "value-key": "[SEPARATE_ALL_DWIS]"
        },
        {
            "command-line-flag": "--distortion-group-merge",
            "description": "Possible choices: concat, average, none",
            "id": "distortion_group_merge",
            "name": "distortion_group_merge",
            "optional": true,
            "type": "String",
            "value-choices": [
              "concat",
              "average"],
            "value-key": "[DISTORTION_GROUP_MERGE]"
        },
        {
            "command-line-flag": "--write-local-bvecs",
            "description": "write a series of voxelwise bvecs, relevant if writing preprocessed dwis to template space",
            "id": "write_local_bvecs",
            "name": "write_local_bvecs",
            "optional": true,
            "type": "Flag",
            "value-key": "[WRITE_LOCAL_BVECS]"
        },
        {
            "command-line-flag": "--output-spaces",
            "description": "Possible choices: T1w, template",
            "id": "output_spaces",
            "list": true,
            "name": "output_spaces",
            "optional": true,
            "type": "String",
            "value-choices": ["T1w", "template"],
            "value-key": "[OUTPUT_SPACES]"
        },
        {
            "command-line-flag": "--template",
            "description": "Possible choices: MNI152NLin2009cAsym",
            "id": "template",
            "name": "template",
            "optional": true,
            "type": "String",
            "value-choices": ["MNI152NLin2009cAsym"],
            "value-key": "[TEMPLATE]"
        },
        {
            "command-line-flag": "--output-resolution",
            "description": "the isotropic voxel size in mm the data will be resampled to after preprocessing. If set to a lower value than the original voxel size, your data will be upsampled using BSpline interpolation.",
            "id": "output_resolution",
            "name": "output_resolution",
            "optional": true,
            "type": "Number",
            "value-key": "[OUTPUT_RESOLUTION]"
        },
        {
            "command-line-flag": "--b0-to-t1w-transform",
            "description": "Possible choices: Rigid, Affine. Degrees of freedom when registering b0 to T1w images. 6 degrees (rotation and translation) are used by default.",
            "id": "b0_to_t1w_transform",
            "name": "b0_to_t1w_transform",
            "optional": true,
            "type": "String",
            "value-choices": ["Rigid", "Affine"],
            "value-key": "[B0_TO_T1W_TRANSFORM]"
        },
        {
            "command-line-flag": "--intramodal_template_iters",
            "description": "Number of iterations for finding the midpoint image from the b0 templates from all groups. Has no effect if there is only one group. If 0, all b0 templates are directly registered to the t1w image.",
            "id": "intramodal_template_iters",
            "name": "intramodal_template_iters",
            "optional": true,
            "type": "Number",
            "value-key": "[INTRAMODAL_TEMPLATE_ITERS]"
        },
        {
            "command-line-flag": "--intramodal_template_transform",
            "description": "Possible choices: Rigid, Affine, BSplineSyN, SyN. Transformation used for building the intramodal template.",
            "id": "intramodal_template_transform",
            "name": "intramodal_template_transform",
            "optional": true,
            "type": "Flag",
            "value-key": "[INTRAMODAL_TEMPLATE_TRANSFORM]"
        },
        {
            "command-line-flag": "--b0_motion_corr_to",
            "description": "Possible choices: iterative, first. Align to the “first” b0 volume or do an “iterative” registration of all b0 images to their midpoint image (default: iterative)",
            "id": "b0_motion_corr_to",
            "name": "b0_motion_corr_to",
            "optional": true,
            "type": "String",
            "value-choices": ["iterative", "first"],
            "value-key": "[B0_MOTION_CORR_TO]"
        },
        {
            "command-line-flag": "--hmc_transform",
            "description": "Possible choices: Affine, Rigid. Transformation to be optimized during head motion correction (default: affine)",
            "id": "hmc_transform",
            "name": "hmc_transform",
            "optional": true,
            "type": "String",
            "value-choices": ["Affine", "Rigid"],
            "value-key": "[HMC_TRANSFORM]"
        },
        {
            "command-line-flag": "--hmc_model",
            "description": "Possible choices: none, 3dSHORE, eddy. Model used to generate target images for hmc. If 'none' the non-b0 images will be warped using the same transform as their nearest b0 image. If '3dSHORE', SHORELine will be used. If 'eddy_ingress', the dwis are assumed to have been run through fsls eddy.",
            "id": "hmc_model",
            "name": "hmc_model",
            "optional": true,
            "type": "String",
            "value-choices": ["3dSHORE", "eddy"],
            "value-key": "[HMC_MODEL]"
        },
        {
            "command-line-flag": "--eddy_config",
            "description": "path to a json file with settings for the call to eddy. If no json is specified, a default one will be used. The current default json can be found here: https://github.com/PennBBL/qsiprep/blob/master/qsiprep/data/eddy_params.json",
            "id": "eddy_config",
            "name": "eddy_config",
            "optional": true,
            "type": "File",
            "value-key": "[EDDY_CONFIG]"
        },
        {
            "command-line-flag": "--shoreline_iters",
            "description": "number of SHORELine iterations. (default: 2)",
            "id": "shoreline_iters",
            "name": "shoreline_iters",
            "optional": true,
            "type": "Number",
            "value-key": "[SHORELINE_ITERS]"
        },
        {
            "command-line-flag": "--impute_slice_threshold",
            "description": "impute data in slices that are this many SDs from expected. If 0 (default), no slices will be imputed",
            "id": "impute_slice_threshold",
            "name": "impute_slice_threshold",
            "optional": true,
            "type": "Number",
            "value-key": "[IMPUTE_SLICE_THRESHOLD]"
        },
        {
            "command-line-flag": "--skull_strip_template",
            "description": "Possible choices: OASIS, NKI. select ANTs skull-stripping template (default: OASIS)",
            "id": "skull_strip_template",
            "name": "skull_strip_template",
            "optional": true,
            "type": "String",
            "value-choices": ["OASIS", "NKI"],
            "value-key": ["SKULL_STRIP_TEMPLATE"]
        },
        {
            "command-line-flag": "--skull_strip_fixed_seed",
            "description": "do not use a random seed for skull-stripping - will ensure run-to-run replicability when used with –omp-nthreads 1",
            "id": "skull_strip_fixed_seed",
            "name": "skull_strip_fixed_seed",
            "optional": true,
            "type": "Flag",
            "value-key": "[SKULL_STRIP_FIXED_SEED]"
        },
        {
            "command-line-flag": "--skip_t1_based_spatial_normalization",
            "description": "skip running the t1w-based normalization to template space. Default is to run the normalization.",
            "id": "skip_t1_based_spatial_normalization",
            "name": "skip_t1_based_spatial_normalization",
            "optional": true,
            "type": "Flag",
            "value-key": "[SKIP_T1_BASED_SPATIAL_NORMALIZATION]"
        },
        {
            "command-line-flag": "--fs_license_file",
            "description": "Path to FreeSurfer license key file.",
            "id": "fs_license_file",
            "name": "fs_license_file",
            "optional": false,
            "type": "File",
            "value-key": "[FS_LICENSE_FILE]"
        },
        {
            "command-line-flag": "--do_reconall",
            "description": "Run the FreeSurfer recon-all pipeline",
            "id": "do_reconall",
            "name": "do_reconall",
            "optional": false,
            "type": "Flag",
            "value-key": "[DO_RECONALL]"
        },
        {
            "command-line-flag": "--prefer_dedicated_fmaps",
            "description": "forces unwarping to use files from the fmap directory instead of using an RPEdir scan from the same session.",
            "id": "prefer_dedicated_fmaps",
            "name": "prefer_dedicated_fmaps",
            "optional": true,
            "type": "Flag",
            "value-key": "[PREFER_DEDICATED_FMAPS]"
        },
        {
            "command-line-flag": "--fmap_bspline",
            "description": "fit a B-Spline field using least-squares (experimental) ",
            "id": "fmap_bspline",
            "name": "fmap_bspline",
            "optional": true,
            "type": "Flag",
            "value-key": "[FMAP_BSPLINE]"
        },
        {
            "command-line-flag": "--fmap_no_demean",
            "description": "do not remove median (within mask) from fieldmap (default: True)",
            "id": "fmap_no_demean",
            "name": "fmap_no_demean",
            "optional": true,
            "type": "Flag",
            "value-key": "[FMAP_NO_DEMEAN]"
        },
        {
            "command-line-flag": "--use-syn-sdc",
            "description": "EXPERIMENTAL: Use fieldmap-free distortion correction",
            "id": "use_syn_sdc",
            "name": "use_syn_sdc",
            "optional": true,
            "type": "Flag",
            "value-key": "[USE_SYN_SDC]"
        },
        {
            "command-line-flag": "--force-syn",
            "description": "EXPERIMENTAL/TEMPORARY: Use SyN correction in addition to fieldmap correction, if available",
            "id": "force_syn",
            "name": "force_syn",
            "optional": true,
            "type": "Flag",
            "value-key": "[FORCE_SYN]"
        },
        {
            "command-line-flag": "-w",
            "description": "path where intermediate results should be stored",
            "id": "work_dir",
            "name": "work_dir",
            "optional": true,
            "type": "String",
            "value-key": "[WORK_DIR]"
        },
        {
            "command-line-flag": "--resource-monitor",
            "description": "enable Nipype's resource monitoring to keep track of memory and CPU usage",
            "id": "resource_monitor",
            "name": "resource_monitor",
            "optional": true,
            "type": "Flag",
            "value-key": "[RESOURCE_MONITOR]"
        },
        {
            "command-line-flag": "--reports-only",
            "description": "only generate reports, don't run workflows. This will only rerun report aggregation, not reportlet generation for specific nodes.",
            "id": "reports_only",
            "name": "reports_only",
            "optional": true,
            "type": "Flag",
            "value-key": "[REPORTS_ONLY]"
        },
        {
            "command-line-flag": "--run_uuid",
            "description": "Specify UUID of previous run, to include error logs in report. No effect without –reports-only.",
            "id": "run_uuid",
            "name": "run_uuid",
            "optional": true,
            "type": "String",
            "value-key": "[RUN_UUID]"
        },
        {
            "command-line-flag": "--write-graph",
            "description": "Write workflow graph.",
            "id": "write_graph",
            "name": "write_graph",
            "optional": true,
            "type": "Flag",
            "value-key": "[WRITE_GRAPH]"
        },
        {
            "command-line-flag": "--stop-on-first-crash",
            "description": "Force stopping on first crash, even if a work directory was specified.",
            "id": "stop_on_first_crash",
            "name": "stop_on_first_crash",
            "optional": true,
            "type": "Flag",
            "value-key": "[STOP_ON_FIRST_CRASH]"
        },
        {
            "command-line-flag": "--notrack",
            "description": "Opt-out of sending tracking information of this run to the FMRIPREP developers. This information helps to improve FMRIPREP and provides an indicator of real world usage crucial for obtaining funding.",
            "id": "notrack",
            "name": "notrack",
            "optional": true,
            "type": "Flag",
            "value-key": "[NOTRACK]"
        },
        {
            "command-line-flag": "--sloppy",
            "description": "Use low-quality tools for speed - TESTING ONLY",
            "id": "sloppy",
            "name": "sloppy",
            "optional": true,
            "type": "Flag",
            "value-key": "[SLOPPY]"
        }
    ],
    "invocation-schema": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "additionalProperties": false,
        "dependencies": {},
        "description": "Invocation schema for bids app - fmriprep.",
        "properties": {

            "bids_dir":{ "type": "string" },
            "output_dir": { "type": "string" },
            "analysis_level": { "enum": [ "participant" ] },
            "version": { "type": "boolean" },
            "skip_bids_validation": { "type": "boolean" },
            "participant_label": { "items": { "type": "string" }, "type": "array" },
            "acquisition_type": { "type": "string" },
            "bids_database_dir": { "type": "string" },
            "bids_filter_file":{ "type": "string" },
            "interactive_reports_only": { "type": "boolean" },
            "recon_only": { "type": "boolean" },
            "recon_spec":{ "type": "string" },
            "recon_input":{ "type": "string" },
            "freesurfer_input":{ "type": "string" },
            "skip_odf_reports": { "type": "boolean" },
            "nthreads": { "type": "number" },
            "omp_nthreads": { "type": "number" },
            "mem_mb": { "type": "number" },
            "low_mem": { "type": "boolean" },
            "use_plugin": { "type": "string" },
            "anat_only": { "type": "boolean" },
            "dwi_only": { "type": "boolean" },
            "infant": { "type": "boolean" },
            "boilerplate_only": { "type": "boolean" },
            "verbosity": { "enum": [ "-v", "-vv", "-vvv" ] },
            "ignore": { "items": { "enum": [ "fieldmaps" ], "type":"string" }, "type": "array" },
            "longitudinal": { "type": "boolean" },
            "b0_threshold": { "type": "number" },
            "dwi_denoise_window": { "type": "number" },
            "denoise_method": { "enum": [ "dwidenoise", "patch2self" ] },
            "unringing_method": { "enum": [ "mrdegibbs" ] },
            "dwi_no_biascorr": { "type": "boolean" },
            "no_b0_harmonization": { "type": "boolean" },
            "denoise_after_combining": { "type": "boolean" },
            "separate_all_dwis": { "type": "boolean" },
            "distortion_group_merge": { "enum": [ "concat", "average" ] },
            "write_local_bvecs": { "type": "boolean" },
            "output_spaces": { "type": "array" },
            "template": { "enum": [ "MNI152NLin2009cAsym" ] },
            "output_resolution": { "type": "number" },
            "b0_to_t1w_transform": { "enum": [ "Rigid", "Affine" ] },
            "intramodal_template_iters": { "type": "number" },
            "intramodal_template_transform": { "enum": [ "Rigid", "Affine", "BSplineSyN", "SyN"] },
            "b0_motion_corr_to": { "enum": [ "first", "iterative"] },
            "hmc_transform": { "enum": [ "Affine", "Rigid"] },
            "hmc_model": { "enum": [ "3dSHORE", "eddy"] },
            "eddy_config": { "type": "string" },
            "shoreline_iters": { "type": "number" },
            "impute_slice_threshold": { "type": "number" },
            "skull_strip_template": { "enum": [ "OASIS", "NKI"] },
            "skull_strip_fixed_seed": { "type": "boolean" },
            "skip_t1_based_spatial_normalization": { "type": "boolean" },
            "fs_license_file": { "type": "string" },
            "do_reconall": { "type": "boolean" },
            "prefer_dedicated_fmaps": { "type": "boolean" },
            "fmap_bspline": { "type": "boolean" },
            "fmap_no_demean": { "type": "boolean" },
            "use_syn_sdc": { "type": "boolean" },
            "force_syn": { "type": "boolean" },
            "work_dir": { "type": "string" },
            "run_uuid":{ "type": "string" },
            "resource_monitor": { "type": "boolean" },
            "reports_only": { "type": "boolean" },
            "write_graph": { "type": "boolean" },
            "notrack": { "type": "boolean" },
            "stop_on_first_crash": { "type": "boolean" },
            "sloppy": { "type": "boolean" }
        },
        "required": [
            "bids_dir",
            "output_dir",
            "analysis_level",
            "fs_license_file"
        ],
        "title": "BIDS App - fmriprep.invocationSchema",
        "type": "object"
    },
    "output-files": [
      {
          "description": "This is the directory where the overall outputs are to be stored.",
          "id": "output_directory",
          "name": "Output Directory",
          "optional": false,
          "path-template": "[OUTPUT_DIR]/qsiprep/sub-[PARTICIPANT_LABEL]"
      }
    ]
}
